version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend environmnet
          when: on_fail
          command: |
           aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id>>  --region us-east-2

      - run:
          name: Destroy udapeople frontend environmnet 
          when: on_fail
          command: |
           aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id>> --region us-east-2
           aws s3 rm s3://udapeople-<< parameters.id>> --recursive

  rollback_db_migrations:
    description: Rollback db migration on fail.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Roll back db migrations
          when: << parameters.when>>
          working_directory: ./backend
          command: |
            SUCESS = $(curl https://kvdb.io/A7wDcVJiAKXkXhM3EhvbLw/migration_<< parameters.id>>  -u 'supersecret:' )
            if [[  "$SUCESS" == 1 ]]
            then 
                npm run migrations:revert
            fi



slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/notify:
        custom: |
          {
            "text": "",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "❌ *Failure* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }
        event: fail
slack-success-pre-step: &slack-success-pre-step
  post-steps:
    - slack/notify:
        custom: |
          {
            "text": "",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "✅ *Success* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }
        event: pass

orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-test]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-test]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-scan]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force 
            npm audit fix --force         
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-scan]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force          
            npm audit fix --force             
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum update
            yum upgrade
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople \
                --region us-east-2
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople \
                --region us-east-2
      - run:
          name: Get instance IDs
          command: |
            echo [all] > inventory.txt
            aws --region us-east-2 \
                ec2 describe-instances \
                --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
                --output text | sed 's/None//g' | sed -r '/^\s*$/d' >> inventory.txt

      - persist_to_workspace:
          root: /root/project
          paths:
            - inventory.txt
      # - run: return 1
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e1:bb:f7:45:7b:3b:91:30:ca:a9:22:39:86:d5:1c:2e"
      - attach_workspace:
          at: /root/project

      - run:
          name: check inventory file exists
          command: |
            ls -la
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            apk add --update openssh
            apk add --update tar
            apk add --update gzip
            pip3 install awscli
      - run:
          name: Run Playbook and Configure server
          command: |
            ls -la
            ansible-playbook -i inventory.txt .circleci/ansible/configure-server.yml 

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              # npm audit fix --audit-level=critical --force          
              # npm audit fix --force
              npm audit  
              npm audit fix 
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io 
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                    curl https://kvdb.io/A7wDcVJiAKXkXhM3EhvbLw/migration_${CIRCLE_WORKFLOW_ID:0:7}?ttl=86400 -d '1' -u 'supersecret:'
              else
                exit 1
              fi

      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

      - rollback_db_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      


     # Here's where you will add some code to rollback on failure  

  # deploy-frontend:
  #   docker:
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: /root/project
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           apk add --update openssh
  #           apk add --update tar
  #           apk add --update gzip
  #           pip3 install awscli
  #           apk add nodejs-current
  #           apk add --update npm
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(echo inventory.txt)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker: 
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "e1:bb:f7:45:7b:3b:91:30:ca:a9:22:39:86:d5:1c:2e"
  #     - attach_workspace:
  #         at: /root/project
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           apk add --update openssh
  #           apk add --update tar
  #           apk add --update gzip
  #           pip3 install awscli
  #           apk add nodejs-current
  #           apk add --update npm

  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm i
  #           npm run build
  #           cd ..
  #           # Zip the directory
  #           tar -C backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml


  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #     docker:
  #       # Lightweight Docker image 
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Install dependencies
  #           command: |
  #             # your code here
  #       - run:
  #           name: Get backend url
  #           command: |
  #             # your code here
  #       - run:
  #           name: Backend smoke test.
  #           command: |
  #             # your code here
  #       - run:
  #           name: Frontend smoke test.
  #           command: |
  #             # your code here
  #       # Here's where you will add some code to rollback on failure  

  #   cloudfront-update:
  #     docker:
  #       # Docker image here that supports AWS CLI
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Install dependencies
  #           command: |
  #             # your code here
  #       - run:
  #           name: Update cloudfront distribution
  #           command: |
  #             # your code here
  #       # Here's where you will add some code to rollback on failure  

  # cleanup:
  #     docker:
  #       # Docker image here
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             export OldWorkflowID="the id here"
  #             export STACKS=[] #put the list of stacks here
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               # your code here
  #             fi

workflows:
  # version: 2
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: udapeople-integration
      #     <<: *slack-fail-post-step
      # - scan-backend:
      #     requires: [build-backend]
      #     context: udapeople-integration
      #     <<: *slack-fail-post-step
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]

      - run-migrations:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend, deploy-infrastructure]
          filters:
            branches:
              only: [master]

     