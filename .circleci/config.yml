version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      udapeople-frontend:
        type: string
        default: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      udapeople-backend:
        type: string
        default: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
           aws cloudformation delete-stack --stack-name << parameters.udapeople-frontend >>  --region us-east-2
           aws cloudformation delete-stack --stack-name << parameters.udapeople-backend >>  --region us-east-2


slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/notify:
        custom: |
          {
            "text": "",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "❌ *Failure* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }
        event: fail
slack-success-pre-step: &slack-success-pre-step
  post-steps:
    - slack/notify:
        custom: |
          {
            "text": "",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "✅ *Success* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }
        event: pass

orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-test]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-test]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-scan]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force 
            npm audit fix --force         
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-scan]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force          
            npm audit fix --force             
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum update
            yum upgrade
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople \
                --region us-east-2
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople \
                --region us-east-2
      - run:
          name: Get instance IDs
          command: |
            echo [all] > workspace/inventory.txt
            aws --region us-east-2 \
                ec2 describe-instances \
                --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
                --output text >> workspace/inventory.txt
            cat workspace/inventory.txt
            pwd
      - persist_to_workspace:
          root: workspace
          paths:
            - inventory.txt
      # - run: return 1
      - destroy_environment:
          udapeople-frontend: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          udapeople-backend: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "d1:e7:8e:82:dc:91:b5:60:cf:68:1a:de:df:21:e0:f8"
      - attach_workspace:
          at: ~/workspace

      - run:
          name: check inventory file exists
          command: |
            ls -la
      - run:
          name: Install Ansible
          command: |
            apk add --update openssh
            apk add --update tar
            apk add --update gzip
            pip3 install awscli
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ls -la
            ansible-playbook -i ~/workspace/inventory.txt ~/project/.circleci/ansible/configure-server.yml 




workflows:
  version: 2
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: udapeople-integration
      #     <<: *slack-fail-post-step
      # - scan-backend:
      #     requires: [build-backend]
      #     context: udapeople-integration
      #     <<: *slack-fail-post-step
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]





          

